import logging.config

loggingConfig = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "%(name)-45s - %(levelname)-6s - %(message)s"
        },
        "extended": {
            "format": "%(asctime)s - %(name)-45s - %(levelname)-6s - %(message)s"
        },
        "json": {
            "format": "name: %(name)s, level: %(levelname)s, time: %(asctime)s, message: %(message)s"
            }
    },

    "handlers": {
        "console_handler": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "stream": "ext://sys.stdout"
        },

        "info_file_handler": {
            "class": "logging.FileHandler",
            "level": "INFO",
            "formatter": "extended",
            "filename": "Log/info.log",
            "encoding": "utf8",

            "mode": "w"
        },

        "debug_file_handler": {
            "class": "logging.FileHandler",
            "level": "DEBUG",
            "formatter": "extended",
            "filename": "Log/debug.log",
            "encoding": "utf8",

            "mode": "w"
        },

        "error_file_handler": {
            "class": "logging.FileHandler",
            "level": "ERROR",
            "formatter": "extended",
            "filename": "Log/error.log",
            "encoding": "utf8",

            "mode": "w"
        }
    },

    "loggers": {
        
    },

    "root": {
        # Use this to log error message to file
        "level": "ERROR",
        "handlers": ["error_file_handler"]
    }
}

def configureLoggers():
    Module_kafkaConsumer_Names = ['cveSearchOutputConsumer', 'cveSearchScanConsumer', 'elasticSendConsumer', 'nessusOutputConsumer', 
                                  'nessusScanConsumer', 'nmapOutputConsumer', 'nmapScanConsumer', 'nseOutputConsumer', 'nseScanConsumer',
                                  'wappalyzerOutputConsumer', 'wappalyzerScanConsumer', 'acunetixOutputConsumer', 'acunetixScanConsumer']
    Module_kafkaProducer_Names = ['cveSearchOutputProducer', 'cveSearchScanProducer', 'elasticSendProducer', 'nessusOutputProducer', 
                                  'nessusScanProducer', 'nmapOutputProducer', 'nmapScanProducer', 'nseOutputProducer', 'nseScanProducer',
                                  'wappalyzerOutputProducer', 'wappalyzerScanProducer', 'acunetixScanProducer', 'acunetixOutputProducer']
    Module_AgentCaller_Names = ['cveSearchCaller', 'nmapCaller', 'nseCaller', 'wappalyzerCaller', 'acunetixCaller']

    loggerNames = []
    for Module_kafkaConsumer_Name in Module_kafkaConsumer_Names:
        loggerNames.append("Module.kafkaConsumer." + Module_kafkaConsumer_Name)

    for Module_kafkaProducer_Name in Module_kafkaProducer_Names:
        loggerNames.append("Module.kafkaProducer." + Module_kafkaProducer_Name)

    for Module_AgentCaller_Name in Module_AgentCaller_Names:
        loggerNames.append("Module.AgentCaller." + Module_AgentCaller_Name)

    templete = {
            "level": "DEBUG",
            "propagate": True,
            "handlers": ["console_handler", "info_file_handler"]}

    resLoggers = dict()
    for loggerName in loggerNames:
        resLoggers[loggerName] = templete


    # Temporary
    resLoggers["kafka.coordinator"] = {
        "level": "DEBUG",
        "propagate": True,
        "handlers": ["console_handler", "debug_file_handler"]}
    # End
    return resLoggers
    

def setupLogging():
    loggingConfig["loggers"] = configureLoggers()
    logging.config.dictConfig(loggingConfig)