# Standard library imports
import json
import threading
import logging

# Third party imports
from kafka import KafkaConsumer

# Local application imports
from Config.config import NmapAgentsAddress, KafkaTopicNames, KafkaConfig, KafkaGroupIds
from Module.AgentCaller.nmapCaller import NmapCaller

class NmapScanConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        #TODO: auto_comit = false
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.NMAPSCAN,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = True,
                        group_id                = KafkaGroupIds.NMAPSCAN,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.nmapAgentsAddress = NmapAgentsAddress.NMAPAGENTSADDRESS
        self.totalAgent = len(self.nmapAgentsAddress)
        self.curAgentIndex = 0
        self.logger = logging.getLogger(__name__)

        self.currentRunningThread = [set() for _ in range(self.totalAgent)]

    def run(self):
        for message in self.consumer:
            try: #To make sure the thread never die
                data = message.value
                self.logger.info('Recieved {}'.format(data))

                while True:
                    nmapAgentAddress = self.nmapAgentsAddress[self.curAgentIndex]
                    isMessageHandled = False
                    assignedIndex = -1

                    if self.isAgentCanScan(self.curAgentIndex):
                        jData = json.dumps(data)
                        nmapCaller = NmapCaller(nmapAgentAddress.get('HOST'), nmapAgentAddress.get('PORT'), jData)
                        nmapCaller.start()
                        self.currentRunningThread[self.curAgentIndex].add(nmapCaller)

                        isMessageHandled = True
                        assignedIndex = self.curAgentIndex

                    self.curAgentIndex = (self.curAgentIndex + 1) % self.totalAgent

                    if isMessageHandled:
                        self.logger.info('{} is sent to agent {} -- its current running {} scans'.format(data, nmapAgentAddress, len(self.currentRunningThread[assignedIndex])))
                        break
            except:
                self.logger.exception(message.value)

    def isAgentCanScan(self, curAgentIndex):
        try:
            MAX_THREAD_PER_AGENT = 5

            total = 0
            for thread in self.currentRunningThread[curAgentIndex].copy():
                if thread.is_alive():
                    total += 1
                else:
                    self.currentRunningThread[curAgentIndex].remove(thread)

            return total < MAX_THREAD_PER_AGENT
        except:
            self.logger.exception()
            return False


            

 