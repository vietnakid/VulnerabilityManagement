# Standard library imports
import json
import threading
import logging

# Third party imports
from kafka import KafkaConsumer

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds
from Module.kafkaProducer.elasticSendProducer import ElasticSendProducers

class NessusOutputConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.NESSUSOUTPUT,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = False,
                        group_id                = KafkaGroupIds.NESSUSOUTPUT,
                        max_poll_records        = 1,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.logger = logging.getLogger(__name__)

    def run(self):
        try:
            while True:
                msg_pack = self.consumer.poll(timeout_ms=2000)
                for message in msg_pack.items():
                    for consumer_record in message[1]:
                        data = consumer_record.value
                        self.logger.info('Recieved {}'.format(data.get("target")))

                        elasticData = self.parseToElasticData(data)
                        elasticSendProducer = ElasticSendProducers()
                        elasticSendProducer.sendDataToQueue(elasticData)

                        self.consumer.commit()
        except:
            self.logger.exception("Thread " + __name__ + " terminated")
 
    def parseToElasticData(self, data):
        result = data
        result["elastic_type"] = "nessusOutput"
        return result