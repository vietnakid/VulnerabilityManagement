# Standard library imports
import json
import threading
import hashlib
import logging

# Third party imports
from kafka import KafkaConsumer
from elasticsearch import Elasticsearch

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds, ElasticConfig

class ElasticSendConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.ELASTICSEND,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = False,
                        group_id                = KafkaGroupIds.ELASTICSEND,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.logger = logging.getLogger(__name__)

    def connect_elasticsearch(self):
        # Connect to cluster over SSL using auth for best security:
        es_header = [{
                'host': ElasticConfig.HOSTNAME,
                'port': 443,
                'use_ssl': True,
                'http_auth': (ElasticConfig.USERNAME, ElasticConfig.PASSWORD)
                }]
        es = Elasticsearch(es_header)
        return es

    def run(self):
        try: #To make sure Elastic Search can connect to ES DB
            es = self.connect_elasticsearch()

            for message in self.consumer:
                try:
                    data = message.value
                    self.logger.info('Recieved {}_{}'.format(data.get("target"), data.get("hostname")))

                    if (data.get("type") == "nmapOutput"):
                        idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("openports")).encode('utf-8')).hexdigest()
                        outcome = es.index(index = ElasticConfig.NMAPINDEX, id = idElastic, body=data)
                        self.logger.info(outcome)
                    elif (data.get("type") == "cveSearchOutput"):
                        idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("weakness")).encode('utf-8')).hexdigest()
                        outcome = es.index(index = ElasticConfig.CVESEARCHINDEX, id = idElastic, body=data)
                        self.logger.info(outcome)
                    elif (data.get("type") == "nseOutput"):
                        idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("nseOutputs")).encode('utf-8')).hexdigest()
                        outcome = es.index(index = ElasticConfig.NSEINDEX, id = idElastic, body=data)
                        self.logger.info(outcome)
                except:
                    self.logger.exception(message.value)

                self.consumer.commit()

        except:
            self.logger.exception("Elastic Search can not connect to ElasticDB")
        