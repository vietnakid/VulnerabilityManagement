# Standard library imports
import json
import threading
import hashlib
import logging

# Third party imports
from kafka import KafkaConsumer
from elasticsearch import Elasticsearch

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds, ElasticConfig

class ElasticSendConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.ELASTICSEND,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = False,
                        group_id                = KafkaGroupIds.ELASTICSEND,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.logger = logging.getLogger(__name__)

    def connect_elasticsearch(self):
        # Connect to cluster over SSL using auth for best security:
        es_header = [{
                'host': ElasticConfig.HOSTNAME,
                'port': ElasticConfig.PORT,
                'use_ssl': ElasticConfig.USESSL,
                'http_auth': (ElasticConfig.USERNAME, ElasticConfig.PASSWORD)
                }]
        es = Elasticsearch(es_header)
        return es

    def run(self):
        try:
            es = self.connect_elasticsearch()

            while True:
                msg_pack = self.consumer.poll(timeout_ms=2000)
                for message in msg_pack.items():
                    for consumer_record in message[1]:
                        try:
                            data = consumer_record.value
                            self.logger.info('Recieved {}_{}'.format(data.get("target"), data.get("hostname")))

                            if (data.get("type") == "nmapOutput"):
                                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("openports")).encode('utf-8')).hexdigest()
                                outcome = es.index(index = ElasticConfig.NMAPINDEX, id = idElastic, body=data)
                                self.logger.info(outcome)
                            elif (data.get("type") == "cveSearchOutput"):
                                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("weakness")).encode('utf-8')).hexdigest()
                                outcome = es.index(index = ElasticConfig.CVESEARCHINDEX, id = idElastic, body=data)
                                self.logger.info(outcome)
                            elif (data.get("type") == "nseOutput"):
                                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("nseOutputs")).encode('utf-8')).hexdigest()
                                outcome = es.index(index = ElasticConfig.NSEINDEX, id = idElastic, body=data)
                                self.logger.info(outcome)
                            elif (data.get("type") == "wappalyzerOutput"):
                                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("result")).encode('utf-8')).hexdigest()
                                outcome = es.index(index = ElasticConfig.WAPPALYZERINDEX, id = idElastic, body=data)
                                self.logger.info(outcome)
                            elif (data.get("type") == "acunetixOutput"):
                                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("scan_stat")).encode('utf-8')).hexdigest()

                                (acunetixSumaryData, acunetixDetailData) = self.normalizeAcunetixData(data)
                                outcomeScanSumary = es.index(index = ElasticConfig.ACUNETIX_SUMARY_INDEX, id = idElastic, body=acunetixSumaryData)

                                self.logger.info(outcomeScanSumary)
                                for detailData in acunetixDetailData:
                                    idElastic = detailData.get('vuln_id')
                                    detailData['target'] = outcomeScanSumary.get('target')
                                    outcomeScanDetail = es.index(index = ElasticConfig.ACUNETIX_DETAIL_INDEX, id = idElastic, body=detailData)
                                    self.logger.info(outcomeScanDetail)
                        except:
                            self.logger.exception(consumer_record.value)

                        self.consumer.commit()
        except:
            self.logger.exception("Thread " + __name__ + " terminated")

    def normalizeAcunetixData(self, acunetixData):
        def normalizeSumaryData(acunetixData):
            acunetixSumaryData = dict()
            acunetixSumaryData['target'] = acunetixData.get('target')
            acunetixSumaryData['scanstat'] = acunetixData.get('scanstat')
            acunetixSumaryData['vuln_stats'] = acunetixData.get('vuln_stats')
            scan_details = acunetixData.get('scan_details')

            acunetixSumaryData['scan_details'] = list()

            for scan_detail in scan_details:
                sumary_scanDetail = dict()
                sumary_scanDetail['response_info'] = scan_detail.get('response_info')
                sumary_scanDetail['affects_url'] = scan_detail.get('affects_url')
                sumary_scanDetail['vt_name'] = scan_detail.get('vt_name')
                sumary_scanDetail['criticality'] = scan_detail.get('criticality')
                sumary_scanDetail['description'] = scan_detail.get('description')
                sumary_scanDetail['vuln_id'] = scan_detail.get('vuln_id')
                sumary_scanDetail['recommendation'] = scan_detail.get('recommendation')
                sumary_scanDetail['affects_detail'] = scan_detail.get('affects_detail')
                sumary_scanDetail['cvss_score'] = scan_detail.get('cvss_score')
                sumary_scanDetail['severity'] = scan_detail.get('severity')
                acunetixSumaryData['scan_details'].append(sumary_scanDetail)

            return acunetixSumaryData

        def normalizeDetailData(acunetixData):
            acunetixDetailData = acunetixData.get('scan_details')
            return acunetixDetailData


        acunetixSumaryData = normalizeSumaryData(acunetixData)
        acunetixDetailData = normalizeDetailData(acunetixData)
        return (acunetixSumaryData, acunetixDetailData)
        