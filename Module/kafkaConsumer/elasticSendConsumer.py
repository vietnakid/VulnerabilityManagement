# Standard library imports
import json
import threading
import hashlib
import logging

# Third party imports
from kafka import KafkaConsumer
from elasticsearch import Elasticsearch

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds, ElasticConfig

class ElasticSendConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        #TODO: auto_comit = false
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.ELASTICSEND,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = True,
                        group_id                = KafkaGroupIds.ELASTICSEND,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))

    def connect_elasticsearch(self):
        # Connect to cluster over SSL using auth for best security:
        es_header = [{
                'host': ElasticConfig.HOSTNAME,
                'port': 443,
                'use_ssl': True,
                'http_auth': (ElasticConfig.USERNAME, ElasticConfig.PASSWORD)
                }]
        es = Elasticsearch(es_header)
        return es

    def run(self):
        es = self.connect_elasticsearch()
        for message in self.consumer:
            data = message.value
            
            print('added to ElasticSend Queue')

            if (data.get("type") == "nmapOutput"):
                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("ports")).encode('utf-8')).hexdigest()
                outcome = es.index(index = ElasticConfig.NMAPINDEX, id = idElastic, body=data)
                print(outcome)
            elif (data.get("type") == "cveSearchOutput"):
                idElastic = str(data.get("target")) + "_" + str(data.get("hostname")) + "_" + hashlib.md5(json.dumps(data.get("cves")).encode('utf-8')).hexdigest()
                outcome = es.index(index = ElasticConfig.CVESEARCHINDEX, id = idElastic, body=data)
                print(outcome)