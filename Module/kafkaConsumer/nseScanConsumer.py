# Standard library imports
import json
import threading
import logging
import time

# Third party imports
from kafka import KafkaConsumer

# Local application imports
from Config.config import NseAgents, KafkaTopicNames, KafkaConfig, KafkaGroupIds
from Module.AgentCaller.nseCaller import NseCaller

class NseScanConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.NSESCAN,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = False,
                        max_poll_records        = 1,
                        max_poll_interval_ms    = 900000,
                        group_id                = KafkaGroupIds.NSESCAN,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.nseAgentsAddress = NseAgents.NSEAGENTSADDRESS
        self.totalAgent = len(self.nseAgentsAddress)
        self.curAgentIndex = 0
        self.logger = logging.getLogger(__name__)

        self.currentRunningThread = [set() for _ in range(self.totalAgent)]

    def run(self):
        try:
            while True:
                msg_pack = self.consumer.poll(timeout_ms=2000)
                for message in msg_pack.items():
                    for consumer_record in message[1]:
                        data = consumer_record.value
                        self.logger.info('Recieved {}'.format(data))

                        while True:
                            nseAgentAddress = self.nseAgentsAddress[self.curAgentIndex]
                            isMessageHandled = False
                            assignedIndex = -1

                            if self.isAgentCanScan(self.curAgentIndex):
                                nseCaller = NseCaller(nseAgentAddress.get('HOST'), nseAgentAddress.get('PORT'), data)
                                nseCaller.start()
                                self.currentRunningThread[self.curAgentIndex].add(nseCaller)

                                isMessageHandled = True
                                assignedIndex = self.curAgentIndex

                            self.curAgentIndex = (self.curAgentIndex + 1) % self.totalAgent

                            if isMessageHandled:
                                self.logger.info('{} is sent to agent [{}] -- its current running [{}] scans'.format(data, nseAgentAddress, len(self.currentRunningThread[assignedIndex])))
                                break

                            self.consumer.commit()
                            if self.curAgentIndex == 0:
                                time.sleep(NseAgents.THREAD_SLEEP_SECOND)
                                self.logger.info('All Nse_Agent are busy.. sleep for {} seconds'.format(NseAgents.THREAD_SLEEP_SECOND))
        except:
            self.logger.exception("Thread " + __name__ + " terminated")

    def isAgentCanScan(self, curAgentIndex):
        # TODO: check if we can ping to the host or not.
        try:
            MAX_THREAD_PER_AGENT = NseAgents.MAX_SCAN_PER_AGENT

            total = 0
            for thread in self.currentRunningThread[curAgentIndex].copy():
                if thread.is_alive():
                    total += 1
                else:
                    self.currentRunningThread[curAgentIndex].remove(thread)

            return total < MAX_THREAD_PER_AGENT
        except:
            self.logger.exception("Thread " + __name__ + " have some error.")
            return False


            

 