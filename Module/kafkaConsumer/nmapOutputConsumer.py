# Standard library imports
import json
import threading
import logging

# Third party imports
from kafka import KafkaConsumer

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds
from Module.kafkaProducer.elasticSendProducer import ElasticSendProducers
from Module.kafkaProducer.cveSeachScanProducer import CVESeachScanProducers
from Module.kafkaProducer.nseScanProducer import NseScanProducers

class NmapOutputConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.NMAPOUTPUT,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = False,
                        group_id                = KafkaGroupIds.NMAPOUTPUT,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.logger = logging.getLogger(__name__)

    def run(self):
        try:
            for message in self.consumer:
                data = message.value
                self.logger.info('Recieved {}_{}'.format(data.get("target"), data.get("hostname")))

                # data = self.normalizeNmapOutput(data)

                elasticData = self.parseToElasticData(data)
                elasticSendProducer = ElasticSendProducers()
                elasticSendProducer.sendDataToQueue(elasticData)

                cveSearchData = self.parseToCveSearchData(data)
                cve_SeachScanProducer = CVESeachScanProducers()
                cve_SeachScanProducer.sendDataToQueue(cveSearchData)

                nseData = self.parseToNseData(data)
                nseScanProducer = NseScanProducers()
                nseScanProducer.sendDataToQueue(nseData)

                self.consumer.commit()
        except:
            self.logger.exception(message.value)


    def parseToElasticData(self, data):
        result = data
        result['scanstats']['time'] = int(result.get('scanstats', {}).get('time', 0))
        result["type"] = "nmapOutput"
        return result
        

    def parseToCveSearchData(self, data):
        return data

    def parseToNseData(self, data):
        result = {}
        result["target"] = data.get("target")
        openports = []
        for port in data.get("openports"):
            openports.append(port)
        result["openports"] = openports
        return result

            

            

 