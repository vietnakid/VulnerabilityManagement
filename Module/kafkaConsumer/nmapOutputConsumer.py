# Standard library imports
import json
import threading
import logging

# Third party imports
from kafka import KafkaConsumer

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds
from Module.kafkaProducer.elasticSendProducer import ElasticSendProducers
from Module.kafkaProducer.cveSeachScanProducer import CVESeachScanProducers
from Module.kafkaProducer.nseScanProducer import NseScanProducers
from Module.kafkaProducer.wappalyzerScanProducer import WappalyzerScanProducers
from Module.kafkaProducer.acunetixScanProducer import AcunetixScanProducers

class NmapOutputConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.NMAPOUTPUT,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = False,
                        group_id                = KafkaGroupIds.NMAPOUTPUT,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))
        self.logger = logging.getLogger(__name__)

    def run(self):
        try:
            while True:
                msg_pack = self.consumer.poll(timeout_ms=2000)
                for message in msg_pack.items():
                    for consumer_record in message[1]:
                        data = consumer_record.value
                        self.logger.info('Recieved {}_{}'.format(data.get("target"), data.get("hostname")))

                        elasticData = self.parseToElasticData(data)
                        elasticSendProducer = ElasticSendProducers()
                        elasticSendProducer.sendDataToQueue(elasticData)

                        if (data.get('status') == 'hostUp'):
                            cveSearchData = self.parseToCveSearchData(data)
                            cve_SeachScanProducer = CVESeachScanProducers()
                            cve_SeachScanProducer.sendDataToQueue(cveSearchData)

                            nseData = self.parseToNseData(data)
                            nseScanProducer = NseScanProducers()
                            nseScanProducer.sendDataToQueue(nseData)

                            wappalyzerData = self.parseToWappalyzerData(data)
                            wappalyzerScanProducer = WappalyzerScanProducers()
                            wappalyzerScanProducer.sendDataToQueue(wappalyzerData)

                            acunetixData = self.parseToAcunetixData(data)
                            acunetixScanProducers= AcunetixScanProducers()
                            acunetixScanProducers.sendDataToQueue(acunetixData)

                        self.consumer.commit()
        except:
            self.logger.exception("Thread " + __name__ + " terminated")


    def parseToElasticData(self, data):
        result = data
        result["type"] = "nmapOutput"
        return result
        

    def parseToCveSearchData(self, data):
        def getCpesFromData(data):
            '''This will get all scanable cpe from data, which is output of nmap scan'''
            def isScanableCPE(cpe):
                # cpe:/<part>:<vendor>:<product>:<version>:<update>:<edition>:<language>
                _cpe = cpe.split(':')
                return len(_cpe) >= 5

            result = set()
            openports = data.get("openports", [])
            for portData in openports:
                for cpe in portData.get("cpe", []):
                    if isScanableCPE(cpe):
                        result.add(cpe)
            return list(result)
        result = {}
        result["target"] = data.get("target")
        result["hostname"] = data.get("hostname")
        result['cpes'] = getCpesFromData(data)
        result['source'] = 'nmapOutput'
        return result

        

    def parseToNseData(self, data):
        result = {}
        result["target"] = data.get("target")
        result["hostname"] = data.get("hostname")
        openports = []
        for port in data.get("openports"):
            openports.append(port.get('port'))
        result["openports"] = openports
        result['retryTimes'] = 0
        return result

    def parseToWappalyzerData(self, data):
        result = {}
        result["target"] = data.get("target")
        result["hostname"] = data.get("hostname")
        openports = []
        for port in data.get("openports"):
            openports.append(port.get('port'))
        result["openports"] = openports
        return result

    def parseToAcunetixData(self, data):
        result = {}
        result["target"] = data.get("target")
        result["hostname"] = data.get("hostname")
        result["scan_type"] = "High Risk Vulnerabilities"
        return result
            

            

 