# Standard library imports
import json
import threading

# Third party imports
from kafka import KafkaConsumer

# Local application imports
from Config.config import KafkaTopicNames, KafkaConfig, KafkaGroupIds
from Module.kafkaProducer.elasticSendProducer import ElasticSendProducers
from Module.kafkaProducer.cveSeachScanProducer import CVESeachScanProducers
from Module.kafkaProducer.nseScanProducer import NseScanProducers

class NmapOutputConsumers(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        #TODO: auto_comit = false
        self.consumer = KafkaConsumer(
                        KafkaTopicNames.NMAPOUTPUT,
                        bootstrap_servers       = KafkaConfig.BOOTSTRAPSERVER,
                        auto_offset_reset       = 'earliest',
                        enable_auto_commit      = True,
                        group_id                = KafkaGroupIds.NMAPOUTPUT,
                        value_deserializer      = lambda x: json.loads(x.decode('utf-8')))

    def run(self):
        for message in self.consumer:
            try: #To make sure the thread never die
                data = message.value

                print('added to nmapOutput Queue')

                data = self.normalizeNmapOutput(data)

                elasticData = self.parseToElasticData(data)
                if len(elasticData) > 0:
                    elasticSendProducer = ElasticSendProducers(elasticData)
                    elasticSendProducer.sendDataToQueue()

                cveSearchData = self.parseToCveSearchData(data)
                cve_SeachScanProducer = CVESeachScanProducers(cveSearchData)
                cve_SeachScanProducer.sendDataToQueue()

                # nseData = self.parseToNseData(data)
                # nseScanProducer = NseScanProducers(data)
                # nseScanProducer.sendDataToQueue()
            except Exception as e:
                # TODO: ERROR logging
                print(e)

    def normalizeNmapOutput(self, data):
        try:
            if "nmaprun" in data:
                result = {}
                host = data.get("nmaprun").get("host")
                result["target"] = host.get("address").get("@addr")
                result["state"] = host.get("status").get("@state")

                if isinstance(host.get("hostnames").get("hostname"), dict):
                    result["hostname"] = host.get("hostnames").get("hostname").get("@name")
                else:
                    result["hostname"] = host.get("hostnames").get("hostname")[0].get("@name")

                result["startTime"] = host.get("@starttime")
                result["endTime"] = host.get("@endtime")
                
                result["ports"] = []
                ports = host.get("ports").get("port")
                if isinstance(ports, dict):
                    p = {}
                    p['portid'] = ports.get('@portid')
                    p['service'] = ports.get('service')
                    result["ports"].append(p)
                elif isinstance(ports, list):
                    for port in ports:
                        p = {}
                        p['portid'] = port.get('@portid')
                        p['service'] = port.get('service')
                        result["ports"].append(p)
                else:
                    raise Exception("data is in wrong format")

                result["runstats"] = data.get("nmaprun").get("runstats").get("finished")

                return result
        except Exception as e:
            # TODO: ERROR logging
            print(e)
            return {}

    def parseToElasticData(self, data):
        result = data
        result["type"] = "nmapOutput"

        return result
        

    def parseToCveSearchData(self, data):
        return data

    def parseToNseData(self, data):
        return ""

            

            

 