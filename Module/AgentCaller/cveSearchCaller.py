# Standard library imports
import json
import threading
import logging
import time

# Third party imports
import requests

# Local application imports
from Module.kafkaProducer.cveSearchOutputProducer import CVESeachOutputProducers
from Config.config import CVESearchConfig

class CVESearchCaller(threading.Thread):
    def __init__(self, data):
        threading.Thread.__init__(self)
        self.data = data

    def run(self):
        result = {}
        result["target"] = self.data.get("target")
        result["hostname"] = self.data.get("hostname")
        result["timestamp"] = int(time.time())
        
        result["weakness"] = []
        if "ports" in self.data:
            for port in self.data.get("ports"):
                if "service" in port:
                    if "cpe" in port.get("service"):
                        cpes = port.get("service").get("cpe")
                        if isinstance(cpes, str):
                            res = {}
                            res["cpe"] = cpes
                            res["vulnerabilities"] = self.sendRequest(cpes)
                            result["weakness"].append(res)
                        else:
                            for cpe in cpes:
                                res = {}
                                res["cpe"] = cpe
                                res["vulnerabilities"] = self.sendRequest(cpe)
                                result["weakness"].append(res)

        cveSearchOutputProducer = CVESeachOutputProducers(result)
        cveSearchOutputProducer.sendDataToQueue()

    def sendRequest(self, cpe):
        url = CVESearchConfig.URL + CVESearchConfig.API_CVEFOR + cpe
        request = requests.get(url)
        response = request.json()
        result = []
        for res in response:
            cve = {}
            cve["cvss"] = float(res.get("cvss"))
            cve["cwe"] = res.get("cwe")
            cve["cve"] = res.get("id")
            result.append(cve)

        return result