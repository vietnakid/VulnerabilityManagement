# Standard library imports
import json
import threading
import logging
import time

# Third party imports
import requests

# Local application imports
from Module.kafkaProducer.cveSearchOutputProducer import CVESeachOutputProducers
from Config.config import CVESearchConfig

class CVESearchCaller(threading.Thread):
    def __init__(self, data):
        threading.Thread.__init__(self)
        self.data = data
        self.logger = logging.getLogger(__name__)

    def run(self):
        result = {}
        result["target"] = self.data.get("target")
        result["hostname"] = self.data.get("hostname")
        _startTime = int(time.time())
        
        cpes = self.getCpesFromData(self.data)
        result["weakness"] = {}
        for cpe in cpes:
            result["weakness"][cpe] = self.sendRequest(cpe)

        result["startTime"] = _startTime
        result["endTime"] = int(time.time())
        result["duration"] = (result["endTime"] - result["startTime"])

        cveSearchOutputProducer = CVESeachOutputProducers()
        cveSearchOutputProducer.sendDataToQueue(result)

    def sendRequest(self, cpe): 
        result = []
        try:
            url = CVESearchConfig.URL + CVESearchConfig.API_CVEFOR + cpe
            request = requests.get(url)
            response = request.json()
            for res in response:
                cve = {}
                cve["cvss"] = float(res.get("cvss"))
                cve["cwe"] = res.get("cwe")
                cve["cve"] = res.get("id")
                result.append(cve)
        except:
            self.logger.exception()
            
        return result

    def getCpesFromData(self, data):
        '''This will get all scanable cpe from data, which is output of nmap scan'''

        def isScanableCPE(cpe):
            # cpe:/<part>:<vendor>:<product>:<version>:<update>:<edition>:<language>
            _cpe = cpe.split(':')
            return len(_cpe) >= 5

        result = set()
        openports = data.get("openports", {})
        for portData in openports.values():
            for cpe in portData.get("cpe", []):
                if isScanableCPE(cpe):
                    result.add(cpe)
        return result

        


