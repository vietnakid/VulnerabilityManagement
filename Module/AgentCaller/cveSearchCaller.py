# Standard library imports
import json
import threading
import logging
import time
import asyncio

# Third party imports
import requests
import aiohttp
from aiohttp import ClientSession

# Local application imports
from Module.kafkaProducer.cveSearchOutputProducer import CVESeachOutputProducers
from Config.config import CVESearchConfig

class CVESearchCaller(threading.Thread):
    def __init__(self, data):
        threading.Thread.__init__(self)
        self.data = data
        self.logger = logging.getLogger(__name__)

    def run(self):
        result = {}
        result["target"] = self.data.get("target")
        result["hostname"] = self.data.get("hostname")
        _startTime = int(time.time())
        
        cpes = self.getCpesFromData(self.data)
        
        # --begin-- asyncio the requests to CVE Search
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result_cpes = loop.run_until_complete(self.request_all_vuls(cpes))
        loop.close()

        dict_Result = dict()
        for res in result_cpes:
            dict_Result[res[0]] = res[1]

        result["weakness"] = dict_Result

        # --end-- asyncio the requests to CVE Search

        result["startTime"] = _startTime
        result["endTime"] = int(time.time())
        result["duration"] = (result["endTime"] - result["startTime"])

        cveSearchOutputProducer = CVESeachOutputProducers()
        cveSearchOutputProducer.sendDataToQueue(result)

    async def request_all_vuls(self, cpes):
        async with aiohttp.ClientSession() as session:
            tasks = []
            for cpe in cpes:
                tasks.append(self.sendRequest(session, cpe))
            return await asyncio.gather(*tasks, return_exceptions=True)

    async def sendRequest(self, session, cpe): 
        try:
            URL                 = 'https://cve.circl.lu/'
            API_CVEFOR          = 'api/cvefor/'
            url = URL + API_CVEFOR + cpe
            async with session.get(url) as response:
                response = await response.json()
                result = []
                for res in response:
                    cve = {}
                    cve["cvss"] = float(res.get("cvss"))
                    cve["cwe"] = res.get("cwe")
                    cve["cve"] = res.get("id")
                    result.append(cve)
                return (cpe, result)
        except:
            self.logger.exception()
            return (cpe, [])

    def getCpesFromData(self, data):
        '''This will get all scanable cpe from data, which is output of nmap scan'''

        def isScanableCPE(cpe):
            # cpe:/<part>:<vendor>:<product>:<version>:<update>:<edition>:<language>
            _cpe = cpe.split(':')
            return len(_cpe) >= 5

        result = set()
        openports = data.get("openports", {})
        for portData in openports.values():
            for cpe in portData.get("cpe", []):
                if isScanableCPE(cpe):
                    result.add(cpe)
        return result

        


