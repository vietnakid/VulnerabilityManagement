# Standard library imports
import json
import socket
import threading
import logging
import time

# Third party imports


# Local application imports
from Config.config import NessusAgents
from Module.kafkaProducer.nessusOutputProducer import NessusOutputProducers

class NessusCaller(threading.Thread):
    def __init__(self, HOST, PORT, data):
        threading.Thread.__init__(self)
        self.HOST = HOST
        self.PORT = PORT
        self.data = data
        self.logger = logging.getLogger(__name__)

    def run(self):
        try:
            _startTime = int(time.time())

            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.HOST, self.PORT))
                jData = json.dumps(self.data) + '\n'
                s.sendall(jData.encode('utf-8'))

                jOutputData = b''
                while True:
                    _data = s.recv(1024)
                    if not _data:
                        break
                    jOutputData += _data
            
            try: # Nessus agents can send invalid data
                nessusOutputData = json.loads(jOutputData.decode('utf-8'))

                outputData = dict()
                outputData['scan_details'] = self.processNessusOutputData(nessusOutputData)
                outputData['vuln_stats'] = {
                    "informational" : 0,    
                    "low" : 0,
                    "medium" : 0,
                    "high" : 0
                }

                for scan_detail in outputData['scan_details']:
                    if scan_detail['cvss'] < 4:
                        outputData['vuln_stats']['low'] += 1
                    elif scan_detail['cvss'] < 7:
                        outputData['vuln_stats']['medium'] += 1
                    else:
                        outputData['vuln_stats']['high'] += 1
                
                scan_stat = dict()
                scan_stat["startTime"] = _startTime
                scan_stat["endTime"] = int(time.time())
                scan_stat["duration"] = (scan_stat["endTime"] - scan_stat["startTime"])
                outputData["scanstat"] = scan_stat

                outputData["hostname"] = self.data.get("hostname")

                outputData['target'] = self.data.get('target')
                outputData["ports"] = self.data.get("ports")
                outputData['root_scan_id'] = self.data.get('root_scan_id')
                outputData['scan_type'] = self.data.get('scan_type')
                outputData['scan_id'] = self.data.get('scan_id')
                outputData['scan_name'] = self.data.get('scan_name')
                
                
                nessusOutputProducers = NessusOutputProducers()
                nessusOutputProducers.sendDataToQueue(outputData)
                
            except:
                self.logger.exception("There are something wrong with return data for target= {}: Recived data = {}".format(self.data, jOutputData))
        except:
            self.logger.exception("Something wrong when connect to acunetix host at: " + str(self.HOST) + ":" + str(self.PORT))

    def processNessusOutputData(self, nessusOutputData):
        result = []
        scan_details = nessusOutputData['scan_details']
        for scan_detail in scan_details:
            pluginattributes = scan_detail["info"]["plugindescription"]["pluginattributes"]
            risk_factor = pluginattributes["risk_information"]["risk_factor"]
            if risk_factor != 'None':
                vul = dict()
                vul["risk_factor"] = risk_factor
                vul["cvss"] = float(pluginattributes["risk_information"]["cvss_base_score"])
                vul["pluginname"] = pluginattributes["plugin_name"]
                vul["solution"] = pluginattributes["solution"]
                vul["description"] = pluginattributes["description"]
                vul["ports"] = scan_detail["outputs"][0]["ports"]
                vul["plugin_output"] = scan_detail["outputs"][0]["plugin_output"]
                result.append(vul)
        return result