# Standard library imports
import json
import socket
import threading
import logging

# Third party imports


# Local application imports
from Module.kafkaProducer.nmapOutputProducer import NmapOutputProducers
from Module.kafkaProducer.nmapScanProducer import NmapScanProducers

class NmapCaller(threading.Thread):
    def __init__(self, HOST, PORT, data):
        threading.Thread.__init__(self)
        self.HOST = HOST
        self.PORT = PORT
        self.data = data
        self.logger = logging.getLogger(__name__)

    def run(self):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.HOST, self.PORT))
                data = self.data + '\n'
                s.sendall(data.encode('utf-8'))

                outputData = b''
                while True:
                    _data = s.recv(1024)
                    if not _data:
                        break
                    outputData += _data
            
            try: # Nmap agents can send invalid data
                jOutputData = json.loads(outputData)
                
                status = jOutputData.get('status')
                if status == None:
                    raise ValueError("Error with json")
                elif status == 'error':
                    error = jOutputData.get('detail', "Error do not have detail")
                    self.logger.error("nmap Agents Error = {} .. Resend {} to nmapScan queue".format(error, self.data))
                    self.resendDataToNmapScanQueue()
                elif status == 'hostDown':
                    pass
                elif status == 'hostUp':
                    nmapOutputProducer = NmapOutputProducers()
                    nmapOutputProducer.sendDataToQueue(jOutputData)
            except:
                self.logger.exception("There are something wrong with return data from nmap Agent for target= {}: Recived data = {} ... Resend {} to nmapScan queue".format(self.data, outputData, self.data))
                self.resendDataToNmapScanQueue()
        except:
            self.logger.exception("Something wrong when connect to nmap host at: " + str(self.HOST) + ":" + str(self.PORT) + ".. Resend {} to nmapScan queue".format(self.data))
            self.resendDataToNmapScanQueue()

    def resendDataToNmapScanQueue(self):
        jData = json.loads(self.data)
        nmapScanProducer = NmapScanProducers()
        nmapScanProducer.sendDataToQueue(jData)