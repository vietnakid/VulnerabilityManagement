# Standard library imports
import json
import socket
import threading
import logging

# Third party imports


# Local application imports
from Module.kafkaProducer.nmapOutputProducer import NmapOutputProducers

class NmapCaller(threading.Thread):
    def __init__(self, HOST, PORT, data):
        threading.Thread.__init__(self)
        self.HOST = HOST
        self.PORT = PORT
        self.data = data

    def run(self):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((self.HOST, self.PORT))
                data = self.data + '\n' # This just br used for testing perpose.... Actually it will be transfer from queue.
                s.sendall(data.encode('utf-8'))

                outputData = b''
                while True:
                    _data = s.recv(1024)
                    if not _data:
                        break
                    outputData += _data
            
            try: # Data can be not in json format
                jOutputData = json.loads(outputData)
                nmapOutputProducer = NmapOutputProducers(jOutputData)
                nmapOutputProducer.sendDataToQueue()
            except Exception as e:
                # TODO: ERROR logging
                print(e)
        except Exception as e:
            # TODO: ERROR logging
            print(str(self.HOST) + ":" + str(self.PORT))
            print(e)